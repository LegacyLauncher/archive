stages:
  - Build
  - Deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive

  # - dev     – build & deploy to $CI_COMMIT_BRANCH
  # – beta    - manual build & deploy to 'legacy_beta' & 'aur'
  # - release – manual build & deploy to 'legacy', 'mcl'
  RELEASE_GROUP: 'dev'

workflow:
  rules:
    - if: $CI_COMMIT_TAG != null
      variables:
        RELEASE_GROUP: 'beta'
      when: always
    - if: $CI_COMMIT_BRANCH == null
      when: never
    - if: $CI_COMMIT_BRANCH == 'master'
      variables:
        RELEASE_GROUP: 'release'
    - if: $CI_COMMIT_BRANCH =~ /-dmg$/
      variables:
        DMG_ENABLED: 'true'
    - if: $CI_COMMIT_BRANCH =~ /-no-ci$/
      when: never
    - when: always

.expires: &expires
  expire_in: 1 day

.dev_only_rules: &dev_only_rules
  - if: $RELEASE_GROUP == 'dev'
    when: on_success
  - when: never

.dev_and_installer_only_rules: &dev_and_installer_only_rules
  - if: $RELEASE_GROUP == 'dev' && $INSTALLER_ENABLED == 'true'
    when: on_success
  - when: never

.dev_and_portable_only_rules: &dev_and_portable_only_rules
  - if: $RELEASE_GROUP == 'dev' && $PORTABLE_ENABLED == 'true'
    when: on_success
  - when: never

.beta_only_rules: &beta_only_rules
  - if: $RELEASE_GROUP == 'beta'
    when: on_success
  - when: never

.beta_manual_only: &beta_manual_only
  - if: $RELEASE_GROUP == 'beta'
    when: manual
    allow_failure: false
  - when: never

.release_only_rules: &release_only_rules
  - if: $RELEASE_GROUP == 'release'
    when: on_success
  - when: never

.release_manual_only: &release_manual_only
  - if: $RELEASE_GROUP == 'release'
    when: manual
    allow_failure: false
  - when: never

.legacy: &legacy
  SHORT_BRAND: 'legacy'
  PORTABLE_ENABLED: 'true'
  INSTALLER_ENABLED: 'true'
  DMG_ENABLED: 'true'

.mcl: &mcl
  SHORT_BRAND: 'mcl'
  INSTALLER_ENABLED: 'true'
  DMG_ENABLED: 'true'

.beta: &beta
  SHORT_BRAND: 'legacy_beta'
  DMG_ENABLED: 'true'

.aur: &aur
  SHORT_BRAND: 'aur'
  PKGBUILD_ENABLED: 'true'
  PKGBUILD_PUSH: 'true'

.appt: &appt
  SHORT_BRAND: 'appt'
  DMG_ENABLED: 'true'

.dev: &dev
  SHORT_BRAND: $CI_COMMIT_BRANCH

.ssh: &ssh
  image: bitnami/git:2
  stage: Deploy
  before_script: &ssh_before
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - cat $SSH_KNOWN_HOSTS_FILE > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - base64 -d $SSH_PRIVATE_KEY_BASE64_FILE > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

.ssh_deploy: &ssh_deploy
  <<: *ssh
  resource_group: deploy-$SHORT_BRAND-$ENTITY
  script:
    - >
      for host in $SSH_HOSTS; do \
        echo "Uploading $ENTITY to $host"; \
        ssh $SSH_USER@$host mkdir -p $SSH_BRANDS_DIR/files/$SHORT_BRAND/$ENTITY; \
        scp -v -r ${ENTITY_PATH:-$ENTITY}/build/update/$SHORT_BRAND/* $SSH_USER@$host:$SSH_BRANDS_DIR/files/$SHORT_BRAND/$ENTITY/; \
        ssh $SSH_USER@$host bash $SSH_BRANDS_DIR/deploy.sh $ENTITY $SHORT_BRAND; \
      done

.build: &build
  image: docker.io/library/eclipse-temurin:17
  stage: Build
  script:
    - 'export GRADLE_USER_HOME=`pwd`/.gradle'
    - '[[ $RELEASE_GROUP != "dev" ]] && export INCLUDE_CHANGELOG=true'
    - './gradlew build buildLauncherRepo'
  cache:
    paths:
      - .gradle/wrapper
      - .gradle/caches
  artifacts:
    paths:
      - launcher/build/update/$SHORT_BRAND
      - bootstrap/build/update/$SHORT_BRAND
      - packages/aur/build/aur/$SHORT_BRAND
      - packages/portable/build/update/$SHORT_BRAND
      - packages/installer/build/innosetup/$SHORT_BRAND
      - packages/dmg/build/dmg/$SHORT_BRAND
      - lib
    <<: *expires

.installer: &installer
  image:
    name: amake/innosetup@68d4059f953d5c35d97e642f76bccb510eb7e472f1873ded5865ba5940e7f28e
    entrypoint: [""]
  stage: Build
  script:
    - cd packages/installer/build/innosetup/$SHORT_BRAND
    - iscc "/O..\\..\\update\\$SHORT_BRAND" "/Finstaller" main.iss
  artifacts:
    paths:
      - packages/installer/build/update/$SHORT_BRAND
    <<: *expires

.upload_libraries: &upload_libraries
  <<: *ssh
  resource_group: deploy-libraries
  stage: Deploy
  script:
    - >
      for host in $SSH_HOSTS; do \
        echo "Uploading libraries to $host"; \
        scp -v -r lib/$SHORT_BRAND/* $SSH_USER@$host:$SSH_LIBRARIES_DIR/; \
      done

.deploy: &deploy
  <<: *ssh_deploy

.deploy_bootstrap: &deploy_bootstrap
  <<: *ssh_deploy
  artifacts:
    paths:
      - bootstrap/build/update/$SHORT_BRAND/bootstrap.jar
    <<: *expires

.gen_srcinfo: &gen_srcinfo
  image:
    name: whynothugo/makepkg@52f3064753caf65d09fd86239f1052aab0c191dd56dc265320f3c61ecc375067
    entrypoint: [""]
  stage: Build
  script:
    - cd packages/aur/build/aur/$SHORT_BRAND
    - sudo chown $(whoami):$(whoami) -R .
    - makepkg --printsrcinfo > .SRCINFO
  artifacts:
    paths:
      - packages/aur/build/aur/$SHORT_BRAND
    <<: *expires

.push_pkgbuild: &push_pkgbuild
  <<: *ssh
  resource_group: deploy-aur
  before_script:
    - *ssh_before
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_EMAIL"
    - ssh-keyscan -H $PKGBUILD_GIT_HOST >> ~/.ssh/known_hosts
  script:
    - git clone $PKGBUILD_GIT_ORIGIN -b $PKGBUILD_GIT_BRANCH ~/aur
    - PKGVER=$(cat ~/aur/.pkgver || printf "")
    - PKGREL=$(cat ~/aur/.pkgrel || printf "1")
    - rm -rf ~/aur/*
    - cp -r packages/aur/build/aur/$SHORT_BRAND/. ~/aur/
    - cd ~/aur
    - >
      if [[ "$PKGVER" == "$(cat .pkgver)" ]]; then \
        PKGREL_INCR=$(expr "$PKGREL" + 1); \
        echo "Incrementing pkgrel ($PKGREL -> $PKGREL_INCR): last commit released the same version ($PKGVER)"; \
        sed -i "s/pkgrel=1/pkgrel=$PKGREL_INCR/g" PKGBUILD; \
        sed -i "s/pkgrel = 1/pkgrel = $PKGREL_INCR/g" .SRCINFO; \
        printf $PKGREL_INCR > .pkgrel; \
      fi
    - git add .
    - git commit -m "$(cat .pkgver)-$(cat .pkgrel)"
    - git push origin

'Build':
  <<: *build
  variables:
    <<: *dev
  rules:
    - *dev_only_rules

'Upload libs':
  <<: *upload_libraries
  variables:
    <<: *dev
  rules:
    - *dev_only_rules
  needs: ['Build']

'Installer.exe':
  <<: *installer
  variables:
    <<: *dev
  rules:
    - *dev_and_installer_only_rules
  dependencies: ['Build']
  needs: ['Build']

'Launcher.jar':
  <<: *deploy
  variables:
    <<: *dev
    ENTITY: launcher
  rules:
    - *dev_only_rules
  dependencies: ['Build']
  needs: ['Build', 'Upload libs']

'Bootstrap.jar':
  <<: *deploy_bootstrap
  variables:
    <<: *dev
    ENTITY: bootstrap
  rules:
    - *dev_only_rules
  dependencies: ['Build']
  needs: ['Build', 'Upload libs']

'Portable':
  <<: *deploy
  variables:
    <<: *dev
    ENTITY: portable
    ENTITY_PATH: packages/portable
  rules:
    - *dev_and_portable_only_rules
  dependencies: ['Build']
  needs: ['Build', 'Upload libs', 'Launcher.jar', 'Bootstrap.jar']

'Installer':
  <<: *deploy
  variables:
    <<: *dev
    ENTITY: installer
    ENTITY_PATH: packages/installer
  rules:
    - *dev_and_installer_only_rules
  dependencies: ['Installer.exe']
  needs: ['Build', 'Installer.exe', 'Upload libs', 'Launcher.jar', 'Bootstrap.jar']

'Legacy':
  <<: *build
  variables:
    <<: *legacy
  rules:
    - *release_manual_only

'Legacy: libs':
  <<: *upload_libraries
  variables:
    <<: *legacy
  rules:
    - *release_only_rules
  needs: ['Legacy']

'Legacy: launcher':
  <<: *deploy
  variables:
    <<: *legacy
    ENTITY: launcher
  rules:
    - *release_only_rules
  dependencies: ['Legacy']
  needs: ['Legacy', 'Legacy: libs']

'Legacy: bootstrap':
  <<: *deploy_bootstrap
  variables:
    <<: *legacy
    ENTITY: bootstrap
  rules:
    - *release_only_rules
  dependencies: ['Legacy']
  needs: ['Legacy', 'Legacy: libs']

'Legacy: portable':
  <<: *deploy
  variables:
    <<: *legacy
    ENTITY: portable
    ENTITY_PATH: packages/portable
  rules:
    - *release_only_rules
  dependencies: ['Legacy']
  needs: ['Legacy', 'Legacy: libs', 'Legacy: launcher', 'Legacy: bootstrap']

'Legacy: build installer':
  <<: *installer
  variables:
    <<: *legacy
  rules:
    - *release_only_rules
  dependencies: ['Legacy']
  needs: ['Legacy']

'Legacy: installer':
  <<: *deploy
  variables:
    <<: *legacy
    ENTITY: installer
    ENTITY_PATH: packages/installer
  rules:
    - *release_only_rules
  dependencies: ['Legacy: build installer']
  needs: ['Legacy', 'Legacy: build installer', 'Legacy: libs', 'Legacy: launcher', 'Legacy: bootstrap']

'Legacy: source.zip':
  stage: Build
  image: joshkeegan/zip@7354c42af9bd06aa94141289c28e96b479752b970c89b4d9a9a5acc4f0bba68d
  script:
    - mkdir -p source/build/update/$SHORT_BRAND
    - zip -rv9 source/build/update/$SHORT_BRAND/source.zip . -x ".git/*" ".gradle/*" "source/*" ".gitlab-ci.yml"
  cache: []
  dependencies: []
  artifacts:
    paths:
      - source/build/update/$SHORT_BRAND
    <<: *expires
  variables:
    <<: *legacy
  needs: ['Legacy']
  rules:
    - *release_only_rules

'Legacy: source':
  <<: *deploy
  variables:
    <<: *legacy
    ENTITY: source
  rules:
    - *release_only_rules
  dependencies: ['Legacy: source.zip']
  needs: ['Legacy: source.zip']

'MCL':
  <<: *build
  variables:
    <<: *mcl
  rules:
    - *release_manual_only

'MCL: libs':
  <<: *upload_libraries
  variables:
    <<: *mcl
  rules:
    - *release_only_rules
  needs: ['MCL']

'MCL: launcher':
  <<: *deploy
  variables:
    <<: *mcl
    ENTITY: launcher
  rules:
    - *release_only_rules
  dependencies: ['MCL']
  needs: ['MCL', 'MCL: libs']

'MCL: bootstrap':
  <<: *deploy_bootstrap
  variables:
    <<: *mcl
    ENTITY: bootstrap
  rules:
    - *release_only_rules
  dependencies: ['MCL']
  needs: ['MCL', 'MCL: libs']

'MCL: build installer':
  <<: *installer
  variables:
    <<: *mcl
  rules:
    - *release_only_rules
  dependencies: ['MCL']
  needs: ['MCL']

'MCL: installer':
  <<: *deploy
  variables:
    <<: *mcl
    ENTITY: installer
    ENTITY_PATH: packages/installer
  rules:
    - *release_only_rules
  dependencies: ['MCL: build installer']
  needs: ['MCL', 'MCL: build installer', 'MCL: libs', 'MCL: launcher', 'MCL: bootstrap']

'Beta':
  <<: *build
  variables:
    <<: *beta
  rules:
    - *beta_manual_only

'Beta: libs':
  <<: *upload_libraries
  variables:
    <<: *beta
  rules:
    - *beta_only_rules
  needs: ['Beta']

'Beta: launcher':
  <<: *deploy
  variables:
    <<: *beta
    ENTITY: launcher
  rules:
    - *beta_only_rules
  dependencies: ['Beta']
  needs: ['Beta', 'Beta: libs']

'Beta: bootstrap':
  <<: *deploy_bootstrap
  variables:
    <<: *beta
    ENTITY: bootstrap
  rules:
    - *beta_only_rules
  dependencies: ['Beta']
  needs: ['Beta', 'Beta: libs']

'AUR':
  <<: *build
  variables:
    <<: *aur
  rules:
    - *beta_manual_only

'AUR: libs':
  <<: *upload_libraries
  variables:
    <<: *aur
  rules:
    - *beta_only_rules
  needs: ['AUR']

'AUR: launcher':
  <<: *deploy
  variables:
    <<: *aur
    ENTITY: launcher
  rules:
    - *beta_only_rules
  dependencies: ['AUR']
  needs: ['AUR', 'AUR: libs']

'AUR: bootstrap':
  <<: *deploy_bootstrap
  variables:
    <<: *aur
    ENTITY: bootstrap
  rules:
    - *beta_only_rules
  dependencies: ['AUR']
  needs: ['AUR', 'AUR: libs']

'AUR: .SRCINFO':
  <<: *gen_srcinfo
  variables:
    <<: *aur
  rules:
    - *beta_only_rules
  needs: ['AUR']

'AUR: Push':
  <<: *push_pkgbuild
  variables:
    <<: *aur
    ENTITY: bootstrap
  rules:
    - *beta_only_rules
  dependencies:
    - 'AUR: .SRCINFO'
  needs:
    - 'AUR: .SRCINFO'
    - 'AUR: launcher'
    - 'AUR: bootstrap'

'APPT':
  <<: *build
  variables:
    <<: *appt
  rules:
    - *release_manual_only

'APPT: libs':
  <<: *upload_libraries
  variables:
    <<: *appt
  rules:
    - *release_only_rules
  needs: ['APPT']

'APPT: launcher':
  <<: *deploy
  variables:
    <<: *appt
    ENTITY: launcher
  rules:
    - *release_only_rules
  dependencies: ['APPT']
  needs: ['APPT', 'APPT: libs']

'APPT: bootstrap':
  <<: *deploy_bootstrap
  variables:
    <<: *appt
    ENTITY: bootstrap
  rules:
    - *release_only_rules
  dependencies: ['APPT']
  needs: ['APPT', 'APPT: libs']
