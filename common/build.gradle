plugins {
    id 'java-library'
}

apply from: '../gradle/java.gradle'

version project(":launcher").version

sourceSets {
    java11 {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        java {
            srcDirs = files("src/main/java11")
        }
    }
}

compileJava11Java {
    options.release.set(11)
}

dependencies {
    api(libs.slf4j.api)
    api(libs.bundles.jna)
    api(libs.commons.lang3)

    implementation(libs.system.theme.detector)
    java11Implementation(libs.bundles.dbus)
    java11Implementation(libs.junixsocket.core)
    java11Implementation(project(":dbus-java-transport-junixsocket"))

    testImplementation(libs.junit.jupiter.api)
    testRuntimeOnly(libs.junit.jupiter.engine)
}

jar {
    into('META-INF/versions/11') {
        from sourceSets.java11.output
    }

    manifest.attributes(
            'Multi-Release': true
    )
}

test {
    useJUnitPlatform()
}

processResources {
    def repoProperties = [
            "domains":      repo_domains.join(','),
            "eu_prefixes":  repo_domain_zones_eu.join(','),
            "ru_prefixes":  repo_domain_zones_ru.join(','),
            "cdn_prefixes": repo_cdn_path_prefixes.join(','),
    ]

    inputs.property("repoProperties", repoProperties)

    doLast {
        file("$destinationDir/net/legacylauncher/repository/repositories_v1.properties").withWriter('UTF-8') { writer ->
            repoProperties.each { entry ->
                writer.append("$entry.key=$entry.value\n")
            }
        }
    }
}
