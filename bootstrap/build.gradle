import groovy.json.JsonBuilder

import java.nio.charset.Charset
import java.security.DigestInputStream
import java.security.MessageDigest
import java.time.OffsetDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

plugins {
    id 'java'
    id "com.github.johnrengelman.shadow"
    id "org.ajoberstar.grgit"
    id "org.openjfx.javafxplugin"
    id "com.github.gmazzo.buildconfig"
}

apply from: '../gradle/brand.gradle'
apply from: '../gradle/javafx.gradle'

sourceSets {
    modern
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileModernJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

dependencies {
    modernImplementation(sourceSets.main.output)

    implementation(project(":bridge"))
    implementation(project(":common"))
    implementation(libs.raven)
    implementation(libs.jopt.simple)
    implementation(libs.java.statsd.client)
    implementation(libs.java.semver)
    implementation(libs.commons.lang3)
    implementation(libs.commons.compress)
    implementation(libs.gson)
    implementation(libs.commons.io)

    testImplementation(libs.junit.jupiter.api)
    testImplementation(libs.mockito.core)
    testRuntimeOnly(libs.junit.jupiter.engine)
    testRuntimeOnly(libs.mockito.junit.jupiter)
    testRuntimeOnly(libs.mockito.inline)
}

shadowJar {
    relocate("com", "shaded.com")
    relocate("joptsimple", "shaded.joptsimple")
    relocate("org", "shaded.org")
    relocate("ru.turikhay.util.windows.wmi", "shaded.ru.turikhay.util.windows.wmi")
    relocate("net", "shaded.net")

    minimize()

    exclude '*.md'
    exclude '*module-info.class'
    exclude 'LICENSE'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'

    dependencies {
        exclude(dependency('org.openjfx:.*'))
    }

    into('META-INF/versions/11') {
        from sourceSets.modern.output
    }

    manifest.attributes(
            'Main-Class': 'ru.turikhay.tlauncher.bootstrap.BootstrapStarter',
            'Multi-Release': true
    )
}

task runDebug(type: JavaExec) {
    group = "Execution"
    description = "Run BootstrapDebug"
    classpath(sourceSets.main.runtimeClasspath, sourceSets.test.runtimeClasspath)
    maxHeapSize = "128M"
    mainClass.set("ru.turikhay.tlauncher.bootstrap.BootstrapDebug")
    if (System.getenv("JRE_EXECUTABLE")) {
        executable(System.getenv("JRE_EXECUTABLE"))
    }
    if (System.getenv("RUN_EXTERNAL") == "true") {
        jvmArgs("-Dtlauncher.bootstrap.debug.external=true")
    }
//    jvmArgs("-Dsun.java2d.uiScale=1.25")
    jvmArgs("-Dtlauncher.logFolder=${rootDir}/logs")
    jvmArgs("-Dtlauncher.systemCharset=${Charset.defaultCharset().name()}")
    args("--debug")

    dependsOn(":launcher:buildLauncherRepo")

    if (System.getenv("JRE_LEGACY") == "true") {
        dependsOn(":launcher:prepareLauncherDirJava8")
    } else {
        dependsOn(":launcher:prepareLauncherDir")
    }
}

static def generateChecksum(File file) {
    file.withInputStream {
        new DigestInputStream(it, MessageDigest.getInstance('SHA-256')).withStream {
            it.eachByte {}
            it.messageDigest.digest().encodeHex() as String
        }
    }
}

buildConfig {
    className("BuildConfig")
    packageName("ru.turikhay.tlauncher.bootstrap")

    useJavaOutput()

    buildConfigField('String', 'SHORT_BRAND', "\"${short_brand}\"")
    buildConfigField('String', 'FULL_BRAND', "\"${full_brand}\"")
    buildConfigField('String', 'VERSION', "\"${product_version}\"")
}

processResources {
    def meta = [
            version   : product_version,
            shortBrand: short_brand,
            brand     : full_brand,
            buildDate : OffsetDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_DATE_TIME),
    ]

    inputs.property("meta", meta)

    doLast {
        new File(destinationDir, "ru/turikhay/tlauncher/bootstrap/meta.json").text = new JsonBuilder(meta).toString()
    }
}

task generateUpdateJson {
    dependsOn shadowJar
    doLast {
        def jarFileChecksum = generateChecksum(shadowJar.outputs.files.singleFile)

        def meta = [
                version : product_version,
                checksum: jarFileChecksum,
                url     : [
                        "https://tlauncherrepo.com/",
                        "https://tln4.ru/",
                        "https://repo.tlaun.ch/",
                        "https://cdn.turikhay.ru/tlauncher/",
                        "http://cdn.turikhay.ru/tlauncher/"
                ].collect { urlPrefix ->
                    "${urlPrefix}${short_brand}/bootstrap/${jarFileChecksum}.jar"
                }
        ]

        file("${buildDir}/update/bootstrap.json").write(new JsonBuilder(meta).toString())
    }
}

task copyJarAndRenameToSha256(type: Copy) {
    dependsOn shadowJar
    from shadowJar.outputs.files.singleFile
    into "${buildDir}/update"
    rename { generateChecksum(shadowJar.outputs.files.singleFile) + ".jar" }
}

assemble {
    dependsOn(generateUpdateJson, copyJarAndRenameToSha256)
}

test {
    useJUnitPlatform()
}
