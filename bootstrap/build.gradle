import groovy.json.JsonBuilder

import java.security.DigestInputStream
import java.security.MessageDigest
import java.time.OffsetDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter
import java.nio.charset.Charset

plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "org.ajoberstar.grgit"
    id "org.openjfx.javafxplugin"
}

version '1.13.0'

apply from: '../gradle/brand.gradle'
apply from: '../gradle/javafx.gradle'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    implementation(project(":bridge"))
    implementation(project(":common"))
    implementation("com.getsentry.raven:raven:7.8.6")
    implementation("net.sf.jopt-simple:jopt-simple:4.9")
    implementation("com.timgroup:java-statsd-client:3.1.0")
    implementation("com.github.zafarkhaja:java-semver:0.9.0")
    implementation("org.apache.commons:commons-lang3:3.4")
    implementation("org.apache.commons:commons-compress:1.10")
    implementation("com.google.code.gson:gson:2.8.7")
    implementation("commons-io:commons-io:2.5")

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.7.1')
    testImplementation('org.mockito:mockito-core:3.7.7')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.7.1')
    testRuntimeOnly('org.mockito:mockito-junit-jupiter:3.7.7')
    testRuntimeOnly('org.mockito:mockito-inline:3.7.7')
}

jar {
    manifest {
        attributes 'Main-Class': 'ru.turikhay.tlauncher.bootstrap.BootstrapStarter'
    }
}

shadowJar {
    relocate("com", "shaded.com")
    relocate("joptsimple", "shaded.joptsimple")
    relocate("org", "shaded.org")
    relocate("ru.turikhay.util.windows.wmi", "shaded.ru.turikhay.util.windows.wmi")
    relocate("net", "shaded.net")
    minimize()

    exclude '*.md'
    exclude '*module-info.class'
    exclude 'LICENSE'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'

    dependencies {
        exclude(dependency('org.openjfx:.*'))
    }
}

task runDebug(type: JavaExec) {
    group = "Execution"
    description = "Run BootstrapDebug"
    classpath(sourceSets.main.runtimeClasspath, sourceSets.test.runtimeClasspath)
    maxHeapSize = "128M"
    mainClass = "ru.turikhay.tlauncher.bootstrap.BootstrapDebug"
    if (System.getenv("JRE_EXECUTABLE")) {
        executable(System.getenv("JRE_EXECUTABLE"))
    }
    if (System.getenv("RUN_EXTERNAL") == "true") {
        jvmArgs("-Dtlauncher.bootstrap.debug.external=true")
    }
//    jvmArgs("-Dsun.java2d.uiScale=1.25")
    jvmArgs("-Dtlauncher.logFolder=${rootDir}/logs")
    jvmArgs("-Dtlauncher.systemCharset=${Charset.defaultCharset().name()}")
    args("--debug")

    dependsOn(":launcher:buildLauncherRepo")
    dependsOn(":launcher:prepareLauncherDir")
}

static def generateChecksum(File file) {
    file.withInputStream {
        new DigestInputStream(it, MessageDigest.getInstance('SHA-256')).withStream {
            it.eachByte {}
            it.messageDigest.digest().encodeHex() as String
        }
    }
}

task generateMeta {
    doLast {
        def meta = new JsonBuilder()

        meta {
            version(product_version)
            shortBrand(short_brand)
            brand(full_brand)
            buildDate(OffsetDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_DATE_TIME))
        }

        file("$projectDir/src/main/resources/ru/turikhay/tlauncher/bootstrap/meta.json").write(meta.toString())
        file("$projectDir/meta.json").write(meta.toPrettyString())
    }
}

task generateUpdateJson {
    dependsOn shadowJar
    doLast {
        def meta = new JsonBuilder()
        def jarFileChecksum = generateChecksum(shadowJar.outputs.files.singleFile)
        def downloadUrlList = [
                "https://tlauncherrepo.com/",
                "https://u.tlauncher.ru/",
                "https://repo.tlaun.ch/",
                "https://cdn.turikhay.ru/tlauncher/",
                "http://cdn.turikhay.ru/tlauncher/"
        ].collect {
            urlPrefix -> urlPrefix + short_brand + "/bootstrap/" + jarFileChecksum + ".jar"
        }

        meta {
            version product_version
            checksum jarFileChecksum
            url downloadUrlList
        }

        file("${buildDir}/update/bootstrap.json").write(meta.toString())
    }
}

task copyJarAndRenameToSha256(type: Copy) {
    dependsOn shadowJar
    from shadowJar.outputs.files.singleFile
    into "${buildDir}/update"
    rename { generateChecksum(shadowJar.outputs.files.singleFile) + ".jar" }
}

compileJava {
    dependsOn(generateMeta)
}

assemble {
    dependsOn(generateUpdateJson, copyJarAndRenameToSha256)
}

test {
    useJUnitPlatform()
}
