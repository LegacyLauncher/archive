import groovy.json.JsonBuilder
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

import java.nio.charset.Charset
import java.security.DigestInputStream
import java.security.MessageDigest

plugins {
    id 'java'
    id "com.github.johnrengelman.shadow"
    id "org.openjfx.javafxplugin"
    id "com.github.gmazzo.buildconfig"
}

apply from: '../gradle/java.gradle'
apply from: '../gradle/javafx.gradle'

sourceSets {
    java11 {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        java {
            srcDirs = files("src/main/java11")
        }
    }
    dev {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
    }
}

compileJava11Java {
    options.release.set(11)
}

compileTestJava {
    options.release.set(11)
}

compileDevJava {
    options.release.set(11)
}

evaluationDependsOn(":common")

dependencies {
    implementation(project(":bridge"))
    implementation(project(":common"))
    implementation(libs.commons.compress)
    implementation(libs.commons.io)
    implementation(libs.flatlaf)
    implementation(libs.gson)
    implementation(libs.java.semver)
    implementation(libs.java.statsd.client)
    implementation(libs.jopt.simple)
    implementation(libs.oshi)
    implementation(libs.raven)
    implementation(libs.slf4j.api)
    implementation(libs.slf4j.simple)

    java11CompileOnly(project(":common").sourceSets.java11.output)
    java11Implementation(libs.bundles.dbus)
    java11Implementation(libs.junixsocket.core)
    java11Implementation(project(":dbus-java-transport-junixsocket"))

    testImplementation(libs.junit.jupiter.api)
    testImplementation(libs.mockito.core)
    testRuntimeOnly(libs.junit.jupiter.engine)
    testRuntimeOnly(libs.mockito.junit.jupiter)
    testRuntimeOnly(libs.mockito.inline)
}

shadowJar {
    configurations = [
            project.configurations.runtimeClasspath,
            project.configurations.java11RuntimeClasspath,
    ]
    relocate("com.", "shaded.com.") {
        exclude("com.sun.**")
        exclude("/com/sun/**")
        exclude("/com/apple/laf/**")
        exclude("com.formdev.**")
        exclude("com.rm5248.dbusjava.**")
        exclude("/com/rm5248/dbusjava/**")
        exclude("com.kenai.**")
        exclude("/com/kenai/**")
        exclude("com.feralinteractive.**")
        exclude("/com/feralinteractive/**")
        exclude("com.oshi.**")
    }
    relocate("de.", "shaded.de.")
    relocate("io.", "shaded.io.")
//    relocate("joptsimple.", "shaded.joptsimple.")
    relocate("org.", "shaded.org.") {
        exclude("org.freedesktop.**")
        exclude("/org/freedesktop/**")
        exclude("org.newsclub.**")
        exclude("org.slf4j.**")
    }
    relocate("net.legacylauncher.util.windows.wmi", "shaded.net.legacylauncher.util.windows.wmi")
    relocate("net.", "shaded.net.") {
        exclude("net.legacylauncher.**")
        exclude("/net/legacylauncher/**")
        exclude("net.hadess.**")
        exclude("/net/hadess/**")
    }

    exclude '*.md'
    exclude '*module-info.class'
    exclude 'LICENSE'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'

    dependencies {
        exclude(dependency('org.openjfx:.*'))
    }

    into('META-INF/versions/11') {
        from sourceSets.java11.output
    }

    manifest.attributes(
            'Main-Class': 'net.legacylauncher.bootstrap.BootstrapStarter',
            'Multi-Release': true
    )
}

evaluationDependsOn(":launcher")

task runDebug(type: JavaExec) {
    group = "Execution"
    description = "Run BootstrapDebug"
    maxHeapSize = "256M"
    mainClass.set("net.legacylauncher.bootstrap.BootstrapDebug")
    if (System.getenv("JRE_EXECUTABLE")) {
        executable(System.getenv("JRE_EXECUTABLE"))
    }
    if (System.getenv("RUN_EXTERNAL") == "true") {
        jvmArgs("-Dtlauncher.bootstrap.debug.external=true")
    }
    if (System.getenv("UI_SCALE")) {
        jvmArgs("-Dsun.java2d.uiScale=" + System.getenv("UI_SCALE"))
    }
    jvmArgs("-Dtlauncher.logFolder=${rootDir}/logs")
    jvmArgs("-Dtlauncher.systemCharset=${Charset.defaultCharset().name()}")
    if (DefaultNativePlatform.currentOperatingSystem.macOsX) {
        jvmArgs("-Dapple.awt.application.appearance=system")
    }
    args("--debug")

    def librariesDir = project(":launcher").tasks.named("buildLauncherRepo", Sync).get()
    def launcherJar = project(":launcher").tasks.named("jar", Jar).get()
    dependsOn(librariesDir, launcherJar)
    environment("LL_LAUNCHER_JAR", launcherJar.archiveFile.get().asFile)
    environment("LL_LIBRARIES_DIR", librariesDir.destinationDir)

    if (System.getenv("JRE_LEGACY") == "true") {
        javaLauncher.set javaToolchains.launcherFor {
            languageVersion.set JavaLanguageVersion.of(8)
        }
        classpath(sourceSets.dev.runtimeClasspath)
    } else {
        classpath(sourceSets.java11.runtimeClasspath, sourceSets.dev.runtimeClasspath)
    }
}

static def generateChecksum(File file) {
    file.withInputStream {
        new DigestInputStream(it, MessageDigest.getInstance('SHA-256')).withStream {
            it.eachByte {}
            it.messageDigest.digest().encodeHex() as String
        }
    }
}

buildConfig {
    className("BuildConfig")
    packageName("net.legacylauncher.bootstrap")

    useJavaOutput()

    buildConfigField('String', 'SHORT_BRAND', "\"${short_brand}\"")
    buildConfigField('String', 'FULL_BRAND', "\"${full_brand}\"")
    buildConfigField('String', 'VERSION', "\"${product_version}\"")
}

processResources {
    def meta = [
            version   : product_version,
            shortBrand: short_brand,
            brand     : full_brand,
    ]

    inputs.property("meta", meta)

    doLast {
        ["ru/turikhay/tlauncher/bootstrap/meta.json", "META-INF/bootstrap-meta.json"].collect {
            new File(destinationDir, it)
        }.forEach {
            it.parentFile.mkdirs()
            it.text = new JsonBuilder(meta).toString()
        }
    }
}

task generateUpdateJson {
    dependsOn shadowJar
    doLast {
        def jarFileChecksum = generateChecksum(shadowJar.outputs.files.singleFile)

        def downloadPath = "repo/update/${short_brand}/bootstrap/${jarFileChecksum}.jar"

        def meta = [
                version : product_version,
                checksum: jarFileChecksum,
                url     : [ "https://llaun.ch/${downloadPath}" ] + repo_hosts.collect { host ->
                    ["http", "https"].collect {scheme ->
                        "${scheme}://${host}/${downloadPath}"
                    }
                }.flatten().sort { a, b ->
                    a.startsWith("https") ? (b.startsWith("https") ? 0 : -1) : (b.startsWith("https") ? 1 : 0)
                }
        ]

        file("${buildDir}/update/${short_brand}/bootstrap.json").write(new JsonBuilder(meta).toString())
    }
}

task copyJarAndRename(type: Copy) {
    dependsOn shadowJar
    from shadowJar.outputs.files.singleFile
    into "${buildDir}/update/${short_brand}"
    rename { "bootstrap.jar" }
}

task generateSha256File {
    dependsOn shadowJar
    doLast {
        file("${buildDir}/update/${short_brand}/bootstrap.jar.sha256").write(generateChecksum(shadowJar.outputs.files.singleFile))
    }
}

assemble {
    dependsOn(generateUpdateJson, copyJarAndRename, generateSha256File)
}

test {
    useJUnitPlatform()
}
