import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "base"
}

def mainIss = [
        name: "TL ${full_brand}".toString(),
        version: "0.0.0.0",
        id: generateUUIDFromString(short_brand.toString()),
        short_brand: short_brand.toString(),
]

afterEvaluate {
    mainIss['version'] = "${project(":launcher").version}.0".toString()
}

task copyBasePortableBuildToInstaller(type: Copy) {
    dependsOn ":packages:portable:preparePortableBaseBuild"
    from "${project(":packages:portable").buildDir}/portableBase/$short_brand"
    into "$buildDir/innosetup/$short_brand/files/common"
}

task copyInnosetupResources(type: Copy) {
    from "$projectDir/resources"
    into "$buildDir/innosetup/$short_brand"
}

task copyMainIss(type: Copy) {
    from file("$projectDir/main.iss")
    filter(ReplaceTokens, tokens: mainIss)
    filteringCharset = 'UTF-8'
    into "$buildDir/innosetup/$short_brand"
}

task copyJreX64ToInstaller(type: Copy) {
    dependsOn ":packages:portable:unzipJreX64"
    from "${project(":packages:portable").buildDir}/jre/x64"
    into "$buildDir/innosetup/$short_brand/files/x64/jre"
}

task copyJreX86ToInstaller(type: Copy) {
    dependsOn ":packages:portable:unzipJreX86"
    from "${project(":packages:portable").buildDir}/jre/x86"
    into "$buildDir/innosetup/$short_brand/files/x86/jre/x86"
}

task copyJreToInstaller {
    dependsOn (
            copyJreX64ToInstaller,
            copyJreX86ToInstaller,
    )
}

task writeInstallerBuildConfig {
    dependsOn copyBasePortableBuildToInstaller
    doLast {
        file("$buildDir/innosetup/$short_brand/files/common/tl.bootargs").withWriterAppend('UTF-8') {writer ->
            writer.append("\n")
            writer.append("-Dtlauncher.bootstrap.packageMode=windows\n")
        }
    }
}

task prepareInstaller {
    dependsOn (
            copyBasePortableBuildToInstaller,
            copyInnosetupResources,
            copyMainIss,
            copyJreToInstaller,
            writeInstallerBuildConfig,
    )
}

assemble {
    afterEvaluate {
        if (System.getenv("INSTALLER_ENABLED") == "true") {
            dependsOn("prepareInstaller")
        }
    }
    doLast {
        file("$buildDir/innosetup/$short_brand").mkdirs()
        file("$buildDir/update/$short_brand").mkdirs()
    }
}

static String generateUUIDFromString(String val) {
    def random = new Random(val.hashCode())
    def uuidBytes = new byte[16]
    random.nextBytes(uuidBytes)
    return UUID.nameUUIDFromBytes(uuidBytes)
}
