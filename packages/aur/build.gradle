import org.apache.tools.ant.filters.ReplaceTokens

import java.security.DigestInputStream
import java.security.MessageDigest

plugins {
    id "base"
}

LinkedHashMap<String, Object> pkgInfo = []

// If you'd like to change these, check resource files, too
String appDir = "/opt/legacylauncher"
String execPath = "/usr/bin/legacylauncher"

task collectPkgBuildInfo() {
    afterEvaluate {
        dependsOn ":bootstrap:assemble", ":launcher:assemble"
    }

    doLast {
        def launcher = project(':launcher')

        def alternateRepoComment = new ArrayList<String>()
        repo_cdn_path_prefixes.each { cdn_path ->
            alternateRepoComment.add("#_repo='${cdn_path}/repo'")
        }
        repo_hosts.each { host ->
            alternateRepoComment.add("#_repo='https://${host}/repo'")
        }

        def checksums = new ArrayList()

        def launcherLibs = new ArrayList()
        def launcherLibsInstalls = new ArrayList()

        launcher.configurations.tlRuntime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            def artifactId = artifact.moduleVersion.id
            def fileName = artifactId.with { "${name}-${version}.jar" }
            def path = artifactId.with {
                "${group.replace('.', '/')}/${name}/$version/${fileName}"
            }
            launcherLibs.add("\"\${_repo}/libraries/${path}\"")
            launcherLibsInstalls.add("install -Dm0644 \"\${srcdir}/${fileName}\" \"\${pkgdir}${appDir}/lib/${path}\"")
            checksums.add("'${generateChecksum(artifact.file)}' # ${artifact.moduleVersion.id}")
        }

        def resourceList = new ArrayList()
        def resourceDir = file("$projectDir/resources")
        fileTree(dir: resourceDir).visit {
            if (!it.isDirectory()) {
                def path = it.getRelativePath().toString()
                resourceList.add(path)
                checksums.add("'${generateChecksum(it.getFile())}' # ${path}")
            }
        }

        def launcherVersion = launcher.version
        def bootstrapVersion = project(':bootstrap').version

        def launcherChecksum = generateChecksum(tasks.getByPath(':launcher:jar').outputs.files.singleFile)
        def bootstrapChecksum = generateChecksum(tasks.getByPath(':bootstrap:shadowJar').outputs.files.singleFile)

        pkgInfo.putAll([
                'PKGNAME': System.getenv("PKGBUILD_PKGNAME") ?: "legacylauncher",
                'PKGDESC': System.getenv("PKGBUILD_PKGDESC") ?: "Freeware Minecraft launcher",
                'PKGREL': "1",
                'BRAND': short_brand,
                'LAUNCHER_VERSION': launcherVersion,
                'ALTERNATE_REPO_COMMENT': alternateRepoComment.join("\n"),
                'LAUNCHER_CHECKSUM': launcherChecksum,
                'BOOTSTRAP_CHECKSUM': bootstrapChecksum,
                'BOOTSTRAP_VERSION': bootstrapVersion,
                'LAUNCHER_LIBRARIES': collect(launcherLibs),
                'RESOURCE_LIST': collect(resourceList),
                'CHECKSUMS': collect(checksums),
                'LAUNCHER_LIBRARIES_INSTALLS': collect(launcherLibsInstalls),
                'BOOTSTRAP_JAR': "legacylauncher-bootstrap-${bootstrapVersion}-${bootstrapChecksum.substring(0, 8)}.jar".toString(),
                'LAUNCHER_JAR': "legacylauncher-launcher-${launcherVersion}-${launcherChecksum.substring(0, 8)}.jar".toString(),
                'APP_DIR': appDir,
                'EXEC_PATH': execPath,
        ])
    }
}

task generatePkgBuild(type: Copy) {
    dependsOn collectPkgBuildInfo
    from file("$projectDir/PKGBUILD")
    filter(ReplaceTokens, tokens: pkgInfo)
    filteringCharset = 'UTF-8'
    into "$buildDir/aur/${short_brand}"
}

task copyPkgBuildResources(type: Copy) {
    dependsOn collectPkgBuildInfo
    from "$projectDir/resources"
    into "$buildDir/aur/${short_brand}"
}

task writePkgBuildVersion {
    doLast {
        file("$buildDir/aur/${short_brand}/.pkgver").write(project(":launcher").version.toString())
        file("$buildDir/aur/${short_brand}/.pkgrel").write("1")
    }
}

task createPkgBuild {
    dependsOn(
            generatePkgBuild,
            copyPkgBuildResources,
            writePkgBuildVersion,
    )
}

assemble {
    afterEvaluate {
        if (System.getenv("PKGBUILD_ENABLED") == "true") {
            dependsOn("createPkgBuild")
        }
    }
    doLast {
        file("$buildDir/aur/${short_brand}").mkdirs()
    }
}

static String generateChecksum(File file) {
    file.withInputStream {
        new DigestInputStream(it, MessageDigest.getInstance('SHA-256')).withStream {
            it.eachByte {}
            it.messageDigest.digest().encodeHex() as String
        }
    }
}

static def collect(ArrayList list) {
    return list.collect { "  $it" }.join("\n")
}
